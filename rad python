import sqlite3

def connect_db():
    return sqlite3.connect('escola.db')

def create_tables(conn):
    with conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS aluno (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL
            )
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS nota (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                aluno_id INTEGER,
                disciplina TEXT NOT NULL,
                nota REAL,
                FOREIGN KEY (aluno_id) REFERENCES aluno(id)
            )
        ''')

def inserir_aluno(conn, nome):
    with conn:
        conn.execute('INSERT INTO aluno (nome) VALUES (?)', (nome,))

def inserir_nota(conn, aluno_id, disciplina, nota):
    with conn:
        conn.execute('INSERT INTO nota (aluno_id, disciplina, nota) VALUES (?, ?, ?)', (aluno_id, disciplina, nota))

def excluir_aluno(conn, aluno_id):
    with conn:
        conn.execute('DELETE FROM nota WHERE aluno_id = ?', (aluno_id,))
        conn.execute('DELETE FROM aluno WHERE id = ?', (aluno_id,))

def excluir_nota(conn, nota_id):
    with conn:
        conn.execute('DELETE FROM nota WHERE id = ?', (nota_id,))

def modificar_aluno(conn, aluno_id, novo_nome):
    with conn:
        conn.execute('UPDATE aluno SET nome = ? WHERE id = ?', (novo_nome, aluno_id))

def modificar_nota(conn, nota_id, nova_disciplina, nova_nota):
    with conn:
        conn.execute('UPDATE nota SET disciplina = ?, nota = ? WHERE id = ?', (nova_disciplina, nova_nota, nota_id))

def consultar_alunos(conn):
    with conn:
        cursor = conn.execute('SELECT * FROM aluno')
        return cursor.fetchall()

def consultar_notas_aluno(conn, aluno_id):
    with conn:
        cursor = conn.execute('SELECT * FROM nota WHERE aluno_id = ?', (aluno_id,))
        return cursor.fetchall()

def menu():
    print("Escolha uma o que deseja fazer pelos números das opções:")
    print("1. Criar Tabelas")
    print("2. Inserir Aluno")
    print("3. Inserir Nota")
    print("4. Consultar Alunos")
    print("5. Consultar Notas")
    print("6. Alterar Nome do Aluno")
    print("7. Alterar Nota")
    print("8. Encerrar Programa")

def main():
    conn = connect_db()
    while True:
        menu()
        opcao = input("Opção: ")

        if opcao == '1':
            create_tables(conn)
            print("Tabelas criadas com êxito.\n")
        
        elif opcao == '2':
            nome = input("Nome do aluno: ")
            inserir_aluno(conn, nome)
            print("Aluno inserido com êxito.\n")
        
        elif opcao == '3':
            aluno_id = int(input("ID do aluno: "))
            disciplina = input("Disciplina: ")
            nota = float(input("Nota: "))
            inserir_nota(conn, aluno_id, disciplina, nota)
            print("Nota inserida com êxito.\n")
        
        elif opcao == '4':
            alunos = consultar_alunos(conn)
            for aluno in alunos:
                print(f'ID: {aluno[0]}, Nome: {aluno[1]}\n')
        
        elif opcao == '5':
            aluno_id = int(input("ID do aluno: "))
            notas = consultar_notas_aluno(conn, aluno_id)
            for nota in notas:
                print(f'ID Nota: {nota[0]}, Disciplina: {nota[2]}, Nota: {nota[3]}\n')
        
        elif opcao == '6':
            aluno_id = int(input("ID do aluno: "))
            novo_nome = input("Novo nome do aluno: ")
            modificar_aluno(conn, aluno_id, novo_nome)
            print("Nome do aluno alterado com êxito.\n")
        
        elif opcao == '7':
            nota_id = int(input("ID da nota: "))
            nova_disciplina = input("Nova disciplina: ")
            nova_nota = float(input("Nova nota: "))
            modificar_nota(conn, nota_id, nova_disciplina, nova_nota)
            print("Nota alterada com êxito.\n")
        
        elif opcao == '8':
            print("Encerrando programa...")
            break
        
        else:
            print("Opção inválida. Tente novamente.")
    
    conn.close()

if __name__ == '__main__':
    main()
